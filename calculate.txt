import React, { useState } from 'react';
import { View, Text, SafeAreaView, ScrollView, Button, Modal } from 'react-native';
import { Picker } from '@react-native-picker/picker';
import { LiveStock } from '@/constants/LiveStock';
import { Stage } from '@/constants/Stage';
import { Energy } from '@/constants/energyIngredients';
import { Protein } from '@/constants/proteinIngredients';
import IngredientQuantityInput from '@/components/IngredientQuantityInput';

const Calculate = () => {
  const [selectedLiveStock, setSelectedLiveStock] = useState<string | undefined>();
  const [selectedStage, setSelectedStage] = useState<string | undefined>();
  const [selectedEnergy1, setSelectedEnergy1] = useState<string | undefined>();
  const [selectedEnergy2, setSelectedEnergy2] = useState<string | undefined>();
  const [selectedProtein1, setSelectedProtein1] = useState<string | undefined>();
  const [selectedProtein2, setSelectedProtein2] = useState<string | undefined>();
  const [ingredientQuantities, setIngredientQuantities] = useState<{ [key: string]: number }>({});
  const [modalVisible, setModalVisible] = useState(false);

  // Function to get the target crude protein for the selected stage
  const getTargetProtein = (stage: string) => {
    const selectedStage = Stage.find((item) => item.stage === stage);
    return selectedStage ? selectedStage.targetProtein : 'N/A';
  };

  // Filter energy and protein ingredients for the second picker
  const filteredEnergy = Energy.filter((item) => item.title !== selectedEnergy1);
  const filteredProtein = Protein.filter((item) => item.title !== selectedProtein1);

  // Handle quantity changes
  const handleQuantityChange = (ingredient: string, weight: number) => {
    setIngredientQuantities((prev) => ({ ...prev, [ingredient]: weight }));
  };

  // Calculate shared crude protein
  const calculateCrudeProtein = () => {
    // Example logic (replace with your calculation logic)
    let totalProtein = 0;
    for (const ingredient in ingredientQuantities) {
      const weight = ingredientQuantities[ingredient];
      totalProtein += weight * 0.15; // Assuming 15% protein as an example
    }
    return totalProtein.toFixed(2);
  };

  return (
    <ScrollView className="flex-1 bg-green-50 p-5 w-full h-[100%]">
      <SafeAreaView>
        <View className="p-5">
          <Text className="text-lg font-JakartaMedium mb-3 text-center mt-8 text-green-800 shadow-md">
            Select Live Stock & Stage
          </Text>

          {/* Livestock and Stage Dropdowns */}
          <View className="flex-row justify-between mb-5 mt-5">
            <View className="flex-1 border border-gray-300 rounded-lg bg-gray-100 mr-2 p-2">
              <Picker
                selectedValue={selectedLiveStock}
                onValueChange={(itemValue: string) => setSelectedLiveStock(itemValue)}
                style={{ height: 50 }}
              >
                <Picker.Item label="Select LiveStock" value="" />
                {LiveStock.map((item) => (
                  <Picker.Item key={item.id} label={item.LiveStockName} value={item.LiveStockName} />
                ))}
              </Picker>
            </View>

            <View className="flex-1 border border-gray-300 rounded-lg bg-gray-100 p-2">
              <Picker
                selectedValue={selectedStage}
                onValueChange={(itemValue: string) => setSelectedStage(itemValue)}
                style={{ height: 50 }}
              >
                <Picker.Item label="Select Stage" value="" />
                {Stage.map((item) => (
                  <Picker.Item key={item.id} label={item.stage} value={item.stage} />
                ))}
              </Picker>
            </View>
          </View>

          {/* Display Target Protein */}
          {selectedStage && (
            <Text className="text-md text-center text-gray-600">
              Targeted Crude Protein for {selectedStage}: {getTargetProtein(selectedStage)}
            </Text>
          )}

          {/* Energy Source Selection */}
          <View className="mt-10 px-4">
            <Text className="text-md font-JakartaMedium text-center mb-2 text-green-800">
              Select Ingredients For Energy Source
            </Text>
            <View className="flex-wrap flex-row justify-between">
              <View className="w-[48%] mb-4">
                <Picker
                  selectedValue={selectedEnergy1}
                  onValueChange={(itemValue: string) => {
                    setSelectedEnergy1(itemValue);
                    if (itemValue === selectedEnergy2) setSelectedEnergy2(undefined);
                  }}
                  style={{ height: 50 }}
                  className="border border-green-200 rounded-lg bg-gray-100"
                >
                  <Picker.Item label="Ingredients" value="" />
                  {Energy.map((item) => (
                    <Picker.Item key={item.id} label={item.title} value={item.title} />
                  ))}
                </Picker>
              </View>

              <View className="w-[48%] mb-4">
                <Picker
                  selectedValue={selectedEnergy2}
                  onValueChange={(itemValue: string) => setSelectedEnergy2(itemValue)}
                  style={{ height: 50 }}
                  className="border border-green-200 rounded-lg bg-gray-100"
                >
                  <Picker.Item label="Ingredients" value="" />
                  {filteredEnergy.map((item) => (
                    <Picker.Item key={item.id} label={item.title} value={item.title} />
                  ))}
                </Picker>
              </View>
            </View>
          </View>

          {/* Protein Source Selection */}
          <View className="mt-10 px-4">
            <Text className="text-md font-JakartaMedium text-center mb-2 text-green-800">
              Select Ingredients For Protein Source
            </Text>
            <View className="flex-wrap flex-row justify-between">
              <View className="w-[48%] mb-4">
                <Picker
                  selectedValue={selectedProtein1}
                  onValueChange={(itemValue: string) => {
                    setSelectedProtein1(itemValue);
                    if (itemValue === selectedProtein2) setSelectedProtein2(undefined);
                  }}
                  style={{ height: 50 }}
                  className="border border-green-200 rounded-lg bg-gray-100"
                >
                  <Picker.Item label="Ingredients" value="" />
                  {Protein.map((item) => (
                    <Picker.Item key={item.id} label={item.title} value={item.title} />
                  ))}
                </Picker>
              </View>

              <View className="w-[48%] mb-4">
                <Picker
                  selectedValue={selectedProtein2}
                  onValueChange={(itemValue: string) => setSelectedProtein2(itemValue)}
                  style={{ height: 50 }}
                  className="border border-green-200 rounded-lg bg-gray-100"
                >
                  <Picker.Item label="Ingredients" value="" />
                  {filteredProtein.map((item) => (
                    <Picker.Item key={item.id} label={item.title} value={item.title} />
                  ))}
                </Picker>
              </View>
            </View>
          </View>

          {/* Quantity Inputs */}
          <View className="mt-10 px-4">
            <Text className="text-md font-JakartaMedium text-center mb-2 text-green-800">
              Enter Quantity for Selected Ingredients
            </Text>
            <View className="flex-wrap flex-row justify-between">
              {[selectedEnergy1, selectedEnergy2, selectedProtein1, selectedProtein2]
                .filter(Boolean)
                .map((ingredient) => (
                  <View key={ingredient} className="w-[48%] mb-4">
                    <IngredientQuantityInput
                      selectedIngredient={ingredient!}
                      onQuantityChange={(weight) => handleQuantityChange(ingredient!, weight)}
                    />
                  </View>
                ))}
            </View>
          </View>

          {/* Calculate Button */}
          <Button title="Calculate" onPress={() => setModalVisible(true)} />

          {/* Modal for Calculation Results */}
          <Modal
            visible={modalVisible}
            transparent={true}
            animationType="slide"
            onRequestClose={() => setModalVisible(false)}
          >
            <View className="flex-1 justify-center items-center bg-black bg-opacity-50">
              <View className="bg-white rounded-lg p-5 w-[80%]">
                <Text className="text-lg font-bold mb-3 text-center text-green-800">
                  Calculation Results
                </Text>
                {Object.entries(ingredientQuantities).map(([ingredient, weight]) => (
                  <Text key={ingredient} className="text-gray-600 mb-2">
                    {ingredient}: {weight}kg - Shared Crude Protein: {weight * 0.15} (15%)
                  </Text>
                ))}
                <Text className="text-center mt-4 text-green-600 font-bold">
                  Total Crude Protein: {calculateCrudeProtein()}%
                </Text>
                <Button title="Close" onPress={() => setModalVisible(false)} />
              </View>
            </View>
          </Modal>
        </View>
      </SafeAreaView>
    </ScrollView>
  );
};

export default Calculate;